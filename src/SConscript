import os
env = Environment(ENV = os.environ)
 
env['AR'] = 'arm-none-eabi-ar'
env['AS'] = 'arm-none-eabi-as'
env['CC'] = 'arm-none-eabi-gcc'
env['CXX'] = 'arm-none-eabi-g++'
env['LINK'] = 'arm-none-eabi-gcc'                # predefined is 'arm-none-eabi-gcc'
env['RANLIB'] = 'arm-none-eabi-ranlib'
env['OBJCOPY'] = 'arm-none-eabi-objcopy'
env['PROGSUFFIX'] = '.elf'


env['TIVAWARE_PATH'] = '/mnt/c/Users/Cody/embed/tiva-c'


# include locations
env['CPPPATH'] = [
    env['TIVAWARE_PATH']
    ]
# compiler flags
env.Append(CCFLAGS = [
    '-mcpu=cortex-m4',
    '-mfpu=fpv4-sp-d16',
    '-mfloat-abi=softfp',
    '-mthumb',
    '-O2',
    '-ffunction-sections',
    '-fdata-sections',
    '-std=gnu11',
    '-MD',
    '-std=c99',
    '-Wall',
    '-pedantic',
    '-DPART_TM4C123GH6PM'
    ])

# linker flags
env.Append(LINKFLAGS = [
    '-ffunction-sections',
    '-fdata-sections',
    '-T./src/TM4C123GH6PM.ld',
    '--entry=ResetISR',
    '-Xlinker',
    '--gc-sections',
    '--specs=nano.specs',
    ]) 

env.Append(LIBPATH = [
    # libm -> the maths library
    env['TIVAWARE_PATH'] + '/driverlib/gcc',
])
env.Append(LIBS = [
    "driver",
])

 
# build everything
prg = env.Program(
    target = 'main',
    source = [
        'main.c',
        'startup_gcc.c'
    ]
)
 
# binary file builder
def arm_generator(source, target, env, for_signature):
    return '$OBJCOPY -O binary %s %s'%(source[0], target[0])
env.Append(BUILDERS = {
    'Objcopy': Builder(
        generator=arm_generator,
        suffix='.bin',
        src_suffix='.elf'
    )
})
 
env.Objcopy(prg)